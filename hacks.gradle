
ext.doHackyStuff = { final Class<?> clazz ->
    def withExtension = { final File file, final String extension ->
        def i = file.getName().lastIndexOf('.')
        def name = file.getName().substring(0, i)
        return new File(file.getParent(), "$name.$extension")
    }


    this.tasks.register('createMcpToObf', clazz)
            .configure { task ->
                task.setNotch(true)
                task.setReverse(true)
            }
    afterEvaluate {
        def createMcp2Obf = this.tasks.getByName('createMcpToObf')
        def createMcp2Srg = this.tasks.getByName('createMcpToSrg')

        // configure createMcp2Obf task
        if (createMcp2Obf.getSrg() == null) {
            createMcp2Obf.setSrg(createMcp2Srg.getSrg())
            createMcp2Obf.setMappings(createMcp2Srg.getMappings())
            createMcp2Obf.dependsOn(createMcp2Srg)
        }

        def createSrgCopyTask = { final Task tsrgTask ->
            def srgCopyTask = this.tasks.register("${tsrgTask.name}Srg", tsrgTask.getClass())
            tsrgTask.getDependsOn().forEach({ dep ->
                srgCopyTask.get().dependsOn(dep)
            })
      
            srgCopyTask.configure { task ->
                task.setSrg(tsrgTask.getSrg())
                task.setMappings(tsrgTask.getMappings())
               
                task.setFormat('SRG')
                task.setNotch(tsrgTask.getNotch())
                task.setReverse(tsrgTask.getReverse())
                task.setOutput(withExtension(tsrgTask.getOutput(), 'srg'))
            }
            return srgCopyTask
        }
        def createMcp2ObfSrgCopyTask = createSrgCopyTask(createMcp2Obf)
        createMcp2Obf.dependsOn(createMcp2ObfSrgCopyTask)
        def createMcp2SrgSrgCopyTask = createSrgCopyTask(createMcp2Srg)
        createMcp2Srg.dependsOn(createMcp2SrgSrgCopyTask)

        this.sourceSets.forEach({ set ->
            def compileTask = this.project.tasks[set.compileJavaTaskName]
            if (!(compileTask instanceof JavaCompile)) {
                println("[BuildDynasty] Non-java compile task for ${set} of type ${compileTask}")
                return
            }
            compileTask.dependsOn(createMcp2Obf)
            compileTask.doFirst {
                // inject legacy notch srg file
                def createMcp2ObfSrgCopy = createMcp2ObfSrgCopyTask.get()
                def reobfNotchSrgFileArgument = "-AreobfNotchSrgFile=${createMcp2ObfSrgCopy.output.canonicalPath}"
                compileTask.options.compilerArgs += reobfNotchSrgFileArgument
                println("[BuildDynasty] Injecting compiler argument: ${reobfNotchSrgFileArgument}")

                // inject legacy notch srg out file
                def outTSrgFileArgument = '-AoutTsrgFile='
                def compilerArgsIterator = compileTask.options.compilerArgs.listIterator()
                while (compilerArgsIterator.hasNext()) {
                    def compilerArg = compilerArgsIterator.next()
                    if (compilerArg.startsWith(outTSrgFileArgument)) {
                        def argumentFileValue = new File(compilerArg.substring(outTSrgFileArgument.length(), compilerArg.length()))
                        def outNotchSrgFile = withExtension(argumentFileValue, 'notch.srg')
                        def outNotchSrgFileArgument = "-AoutNotchSrgFile=${outNotchSrgFile.canonicalPath}"
                        println("[BuildDynasty] Injecting compiler argument: ${outNotchSrgFileArgument}")
                        compilerArgsIterator.add(outNotchSrgFileArgument)
                    }
                }
            }
        })

        // register reobf jars
        def reobfExtension = this.project.getExtensions().getByName('reobf')
        if (!reobfExtension) {
            throw new IllegalStateException("Could not find \"reobf\" extension")
        }
        def reobfNotchJar = reobfExtension.create(jar.getName())
        reobfNotchJar.dependsOn(createMcp2Obf)
        reobfNotchJar.setMappings(createMcp2Obf.getOutput())

        // even more horrible hack :) for outNotchSrgFile injection
        reobfNotchJar.doFirst {
            // https://github.com/MinecraftForge/ForgeGradle/blob/6639464b29b0923187eee0a609e546ba9f1b998b/src/userdev/java/net/minecraftforge/gradle/userdev/tasks/RenameJar.java#L96
            def extraMappings = reobfNotchJar.getExtraMappings()
            println("[BuildDynasty] Extra mappings: ${extraMappings}")
            def copy = new ArrayList<>()
            extraMappings.forEach { extraMapping ->
                copy.add(withExtension(extraMapping, 'notch.srg'))
            }
            println("[BuildDynasty] New extra mappings: ${copy}")
            reobfNotchJar.setExtraMappings(copy)
        }
    }
}

